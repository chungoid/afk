Project: Multi-Agent Pipeline with Live Agents & Messaging  
Objective: Design and implement an end-to-end AI workflow that carries requirements through analysis, planning, blueprinting, coding, and testing, leveraging live agents and real-time message subscriptions via the mcp-use and kyegomez/swarms library.

1. Analysis Stage  
   1.1. Deploy an Analysis Agent that:  
       • Ingests high-level requirements  
       • Breaks them into discrete tasks  
       • Publishes parsed tasks to a message topic (“tasks.analysis”)  
   1.2. Subscribe Planning Agent(s) to “tasks.analysis” via mcp-use  

2. Planning Stage  
   2.1. Planning Agent reads parsed tasks and:  
       • Prioritizes and sequences subtasks  
       • Estimates effort and dependencies  
       • Publishes a staged plan to “tasks.planning”    

3. Blueprint Stage  
   3.1. Blueprint Agent subscribes to “tasks.planning”  
   3.2. Generates high-level architecture diagrams and module specs  
   3.3. Publishes blueprints to “tasks.blueprint”  

4. Coding Stage  
   4.1. Code Agents (one per module) subscribe to “tasks.blueprint”  
   4.2. Each Code Agent:  
       • Creates boilerplate and core logic  
       • Runs static analysis and linter checks  
       • Publishes code artifacts and status to “tasks.coding”  

5. Testing Stage  
   5.1. Test Agent subscribes to “tasks.coding”  
   5.2. Executes unit, integration, and end-to-end tests  
   5.3. Reports pass/fail and coverage metrics to “tasks.testing”  

6. Live Agents & Orchestration  
   6.1. Orchestrator Agent tracks each pipeline stage via subscriptions:  
       • AST/Changes Updating Documentation/RAG Artifacts so all agents have accurate context retrieval  
       • Automatic retries on failure  
       • Real-time logs and health metrics  

7. Messaging Infrastructure  
   7.1. Use mcp-use for:  
       • Topic creation and subscription management  
       • Guaranteed message delivery and ordering  
   7.2. Use swarms library for:  
       • Peer-to-peer agent discovery  
       • Topic-based pub/sub within agent clusters  

8. Monitoring & Metrics  
   8.1. Collect per-stage KPIs (throughput, latency, error rates)  
   8.2. Expose Prometheus endpoints for dashboards  
   8.3. Alert on SLA breaches   

10. Success Criteria  
   •  End-to-end pipeline completes a feature from requirement to tested code autonomously  
   •  Agents coordinate through RAG & message subscriptions to work together  
   •  <95% message delivery success rate    

Core Project Themes:
1. Retrieval-Augmented Generation (RAG)
2. Feedback-Driven Learning Loop
3. Context-Aware Testing Suite
4. Automated Dependency Analysis & Update
